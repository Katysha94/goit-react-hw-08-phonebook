{"version":3,"file":"static/js/980.146632fc.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/FilterContact/FilterContact.module.css?d984","components/FilterContact/FilterContact.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListIte.module.css?9a9f","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactFormLabel\":\"ContactForm_contactFormLabel__16ABo\",\"contactFormInput\":\"ContactForm_contactFormInput__eC5HJ\",\"contactFormBtn\":\"ContactForm_contactFormBtn__Vy3TA\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectVisibleContact = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) =>\n    contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase().trim()) ||\n        contact.number.toLowerCase().includes(filter.toLowerCase().trim())\n    )\n);\n","import css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from 'notiflix';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: evt.target.elements.name.value,\n      number: evt.target.elements.number.value,\n    };\n\n    const existingContact = contacts.find(\n      contact => contact.name === newContact.name\n    );\n    if (existingContact) {\n      Notiflix.Notify.failure(`Contact ${newContact.name} already exists!`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n\n    const form = evt.currentTarget;\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label className={css.contactFormLabel} htmlFor=\"name\">\n          Name\n        </label>\n        <input\n          className={css.contactFormInput}\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          pattern={\n            \"^[a-zA-Zа-яА-Я]+(([' \\\\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          }\n          required\n        />\n        <label className={css.contactFormLabel} htmlFor=\"number\">\n          Number\n        </label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          className={css.contactFormInput}\n          id=\"number\"\n          pattern={\n            '\\\\+?\\\\d{1,4}?[ .\\\\-\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[ .\\\\-\\\\s]?\\\\d{1,4}[ .\\\\-\\\\s]?\\\\d{1,4}[ .\\\\-\\\\s]?\\\\d{1,9}'\n          }\n          required\n        />\n        <button type=\"submit\" className={css.contactFormBtn}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"FilterContact_filterContainer__d3RTw\",\"filterLabel\":\"FilterContact_filterLabel__ACqM1\",\"filterInput\":\"FilterContact_filterInput__wRKFs\"};","import css from './FilterContact.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilterContacts } from 'redux/contacts/filterSlice';\n\nexport const FilterContact = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = evt => {\n    const { value } = evt.target;\n    dispatch(setFilterContacts(value));\n  };\n\n  return (\n    <div className={css.filterContainer}>\n      <label className={css.filterLabel}>Find contacts by Name</label>\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter name\"\n        value={filter}\n        onChange={handleChange}\n      ></input>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactListItem\":\"ContactListIte_contactListItem__Qn706\",\"contactIcon\":\"ContactListIte_contactIcon__MlNC9\",\"contactListBtn\":\"ContactListIte_contactListBtn__CZwpq\"};","import css from './ContactListIte.module.css';\nimport { MdOutlineDeleteForever } from 'react-icons/md';\nimport { IoMdContact } from 'react-icons/io';\n\nexport const ContactListItem = ({ id, name, number, handleDelete }) => {\n  return (\n    <li className={css.contactListItem} id={id}>\n      <IoMdContact className={css.contactIcon} />\n      {name}: {number}\n      <button\n        className={css.contactListBtn}\n        type=\"button\"\n        onClick={handleDelete}\n      >\n        <MdOutlineDeleteForever />\n      </button>\n    </li>\n  );\n};\n","import css from './ContactList.module.css';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectVisibleContact } from 'redux/contacts/selectors';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filterContacts = useSelector(selectVisibleContact);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    if (filterContacts) {\n      return filterContacts;\n    } else {\n      return contacts;\n    }\n  };\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <ul className={css.contactList}>\n        {getFilteredContacts().map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            handleDelete={() => handleDelete(id)}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { FilterContact } from 'components/FilterContact/FilterContact';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  return (\n    <div>\n      <ContactForm />\n      <FilterContact />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContact","createSelector","contact","name","toLowerCase","includes","trim","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","_jsxs","className","css","onSubmit","evt","preventDefault","newContact","id","nanoid","target","elements","value","find","Notiflix","concat","addContact","currentTarget","reset","htmlFor","type","pattern","required","FilterContact","placeholder","onChange","setFilterContacts","ContactListItem","_ref","handleDelete","IoMdContact","onClick","MdOutlineDeleteForever","ContactList","filterContacts","useEffect","fetchContacts","_Fragment","map","deleteContact","Loader"],"sourceRoot":""}